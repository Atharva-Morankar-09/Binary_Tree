
**    PREORDER TRAVERSAL    **

class Solution {
public:
    vector<int> preorderTraversal(TreeNode* root) 
    {
        vector<int> ans;
        if(root==NULL){return ans;}
        stack<TreeNode*> st;
        st.push(root);
        while(!st.empty())
        {
            TreeNode* node = st.top();
            st.pop();
            ans.push_back(node->val);
            if(node->right!=NULL)
            {
                st.push(node->right);
            }
            if(node->left!=NULL)
            {
                st.push(node->left);
            }
        }
      return ans;  
    }
};

**    INORDER TRAVERSAL   **

class Solution {
public:
    vector<int> inorderTraversal(TreeNode* root) {
        vector<int> ans;
        TreeNode* node=root;
        stack<TreeNode*> st;

        while(true)
        {
            if(node!=NULL){
                st.push(node);
                node=node->left;
            }
            else{
                if(st.empty()==true){break;}
                node=st.top();
                st.pop();
                ans.push_back(node->val);
                node=node->right;
            }
            
        }
      return ans;  
    }
};

**    POSTORDER TRAVERSAL   **

1) Using 1 stack

class Solution {
public:
    vector<int> postorderTraversal(TreeNode* root) {
        vector<int> ans;
        if(root==NULL){return ans;}
        stack<TreeNode*> st;
        TreeNode* curr=root;
        //st.push(curr);
        while(!st.empty() || curr!=NULL)
        {
            if(curr!=NULL)
            {
                st.push(curr);
                curr=curr->left;
            }
            else
            {
                TreeNode* node=st.top()->right;
                if(node==NULL)
                {
                    node=st.top();
                    st.pop();
                    ans.push_back(node->val);
                    while(!st.empty() && node==st.top()->right)
                    {
                        node=st.top();
                        st.pop();
                        ans.push_back(node->val);
                    }
                }
                else
                {
                    curr=node;
                }
               
            }
        }
      return ans;  
    }
};

2) Using 2 stacks

class Solution {
public:
    vector<int> postorderTraversal(TreeNode* root) {
        vector<int> ans;
        if(root==NULL){return ans;}
        stack<TreeNode*> st1,st2;
        st1.push(root);
        
        while(!st1.empty()){
            root=st1.top();
            st1.pop();
            st2.push(root);
            if(root->left!=NULL){st1.push(root->left);}
            if(root->right!=NULL){st1.push(root->right);}
        }
        
        while(!st2.empty()){
            root=st2.top();
            st2.pop();
            ans.push_back(root->val);
        }
      return ans;  
    }
};

