
**    PREORDER TRAVERSAL   **

class Solution {
public:
    vector<int> preorderTraversal(TreeNode* root) 
    {
       vector<int> preorder;
       TreeNode* curr=root;
       while(curr!=NULL)
       {
           if(curr->left==NULL)
           {
               preorder.push_back(curr->val);
               curr=curr->right;
           }
           else
           {
               TreeNode* next=curr->left;
               while(next->right!=NULL && next->right!=curr)
               {
                   next=next->right;
               }
              if(next->right==NULL)
              {
                  next->right=curr;
                  preorder.push_back(curr->val);
                  curr=curr->left;
              }
              else
              {
                  next->right=NULL;
                  curr=curr->right;
              }
           }
       }
      return preorder;  
    }
};


**    INORDER TRAVERSAL   **

class Solution {
public:
    vector<int> inorderTraversal(TreeNode* root) {
         vector<int> inorder;
         TreeNode* curr=root;
         while(curr!=NULL)
         {
             if(curr->left==NULL)
             {
                 inorder.push_back(curr->val);
                 curr=curr->right;
             }
             else
             {
                 TreeNode* next = curr->left;
                 while(next->right!=NULL && next->right!=curr)
                 {
                     next=next->right;
                 }
                 if(next->right==NULL)
                 {
                     next->right=curr;
                     curr=curr->left;
                 }
                 else
                 {
                     next->right=NULL;
                     inorder.push_back(curr->val);
                     curr=curr->right;
                 }
             }
         }
       return inorder; 
    }
};


**    POSTORDER TRAVERSAL   **

class Solution {
public:
    vector<int> postorderTraversal(TreeNode* root) {
       vector<int> postorder;
       TreeNode* curr=root;
       while(curr!=NULL)
       {
           if(curr->right==NULL)
           {
               postorder.push_back(curr->val);
               curr=curr->left;
           }
           else
           {
               TreeNode* next=curr->right;
               while(next->left!=NULL && next->left!=curr)
               {
                   next=next->left;
               }
               if(next->left==NULL)
               {
                   next->left=curr;
                   postorder.push_back(curr->val);
                   curr=curr->right;
               }
               else
               {
                   next->left=NULL;
                   curr=curr->left;
               }
           }
       }
      reverse(postorder.begin(),postorder.end());  
      return postorder;  
    }
};


